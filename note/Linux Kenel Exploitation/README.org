**** Notes on Kernel Exploitation
- Extracting Root Files system
    - Unpacking cpio archives 
      
        #+BEGIN_SRC sh
        $ file rootfs.cpio 
        rootfs.cpio: ASCII cpio archive (SVR4 with no CRC)

        $ mkdir rootfs && cd rootfs
        $ cat ../rootfs.cpio | cpio --extract
        #+END_SRC
    - Packing filesystem to cpio archive

        #+BEGIN_SRC sh
        $ cd rootfs
        $ find . | cpio -o -H newc > ../rootfs.cpio
        $ cd ../ && rm -dR rootfs
        #+END_SRC

    Usually the cpio archive is compress , you can get the cpio file by uncompressing that file with gzip tool.
    #+begin_src sh
    $ file rootfs.img 
    rootfs.img: gzip compressed data, last modified: Sat Nov 24 10:31:41 2018, from Unix
    # Unpack
    $ mkdir rootfs && cd rootfs
    $ cat ../rootfs.img | gunzip | cpio --extract
    # Pack 
    $ cd rootfs
    $ find . | cpio -o -H newc | gzip > ../rootfs.img
    $ cd ../ && rm -dR rootfs

    #+end_src
- Extracting vmlinux from bzimage 
    The script [[https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux][extract-vmlinux]] found under scripts/ in the kernel sources can be used decompresses a kernel image and get the vmlinux file.
- Usefull Tools 
  - pahole : We can use pahole to extract structure information from the vmlinux if there are debug Symbols 
             This will be usefull when you need to find the size of the struct or the offset of a member variable ( the package is available in dwarves package)

    #+begin_src sh
    $ pahole -C file_operations vmlinux
    struct file_operations {
            struct module *            owner;                /*     0     8 */
            loff_t                     (*llseek)(struct file *, loff_t, int); /*     8     8 */
            ssize_t                    (*read)(struct file *, char *, size_t, loff_t *); /*    16     8 */
    ...
    ...
            int                        (*clone_file_range)(struct file *, loff_t, struct file *, loff_t, u64); /*   232     8 */
            ssize_t                    (*dedupe_file_range)(struct file *, u64, u64, struct file *, u64); /*   240     8 */

            /* size: 248, cachelines: 4, members: 31 */
            /* last cacheline: 56 bytes */
    };
    #+end_src
- Setting up Source code navigation in emacs
    #+begin_src emacs-lisp
    ;; https://github.com/leoliu/ggtags
    ;; Dependencies global
    (use-package ggtags
    :ensure t
    :config
    (add-hook 'c-mode-common-hook
                (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                    (ggtags-mode 1))))
    (define-key ggtags-mode-map (kbd "C-c g g") 'ggtags-find-tag-dwim)
    (define-key ggtags-mode-map (kbd "C-c g d") 'ggtags-find-definition)
    (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-tag-regexp)
    (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
    (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
    (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
    (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)
    (define-key evil-normal-state-map (kbd "M-.") 'ggtags-find-tag-dwim)
    (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
    )
    #+end_src

    Creating tags are easy
    #+begin_src sh
    $ cd /path/to/project
    $ gtags
    #+end_src

    Reference : 
    [1] [[https://tuhdo.github.io/c-ide.html][C/C++ Development Environment for Emacs]]
    [2] [[https://techtooltip.wordpress.com/2012/01/06/how-to-integrate-emacs-cscope-to-browse-linux-kernel-source-code/][How To Integrate Emacs & Cscope To Browse Linux Kernel Source Code]]
    [3] [[https://martinezjavier.blogspot.com/2011/07/emacs-configuration-for-linux-kernel.html][Emacs configuration for Linux kernel development]]
