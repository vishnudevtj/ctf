#+TITLE:  ARM Exploitation 
#+AUTHOR:    Vishnu Dev TJ
#+EMAIL:     vishnudevtj@gmail.com
#+TAGS: 


Contains Binaries for learning Exploitation in ARM Architecture .

* Introductio to ARM Architecture

Refer : [[file:arm.org][arm.org]]

* Setting Up the Environment

- Qemu

#+BEGIN_SRC sh
sudo apt-get install qemu qemu-user qemu-user-static
#+END_SRC

- GDB 

The defult GDB does not know anything about other architecture , but ~gdb-multiarch~ adds support for other architecture.

#+BEGIN_SRC sh
sudo apt install gdb-multiarch
#+END_SRC

- GCC-ARM toolchain for cross-compiling 

#+BEGIN_SRC sh
$ sudo apt install gcc-arm-linux-gnueabihf libc6-dev-armhf-cross  binfmtc binfmt-support
$ sudo mkdir /etc/qemu-binfmt
$ sudo ln -s /usr/arm-linux-gnueabihf /etc/qemu-binfmt/arm 
#+END_SRC

Now you can compile ARM binary in your system with 
#+BEGIN_SRC sh
arm-linux-gnueabihf-gcc -ohello hello.c
#+END_SRC

Now onto debugging ARM binaries , with QEMU and GDB .

The following command will execute the binary with ~qemu~ , and you can debug it GDB

#+BEGIN_SRC sh
qemu-arm -g 1337 <binary_name>
#+END_SRC
Change the ~binary_name~ oppropriate file name , then

#+BEGIN_SRC sh
$ gdb-multiarch -q <binary_name>
(gdb) set architecture arm
(gdb) target remote localhost:1337
#+END_SRC

*** pwntool 

Now with QEMU , you can use pwntools to script the exploit  in your local machine .

#+BEGIN_SRC python :results output org drawer
from pwn import *

binary = ELF("<binary_name>")
context.binary = binary


if False:
    # context.log_level = "debug"
    io = remote ("127.0.0.1", 1337)
else:
    # context.log_level = "debug"
    # context.terminal = ['tmux', 'splitw', '-h']

    io = gdb.debug(binary.path)


io.interactive()
#+END_SRC

** Additional Tools

- [[https://github.com/radare/radare2/][Radare2]]
    #+BEGIN_SRC sh
    $r2 <binary_name> -A arm -b 32
    #+END_SRC
- [[https://github.com/hugsy/gef][GEF]] 
    #+BEGIN_SRC sh
    $ wget -O ~/.gdbinit-gef.py -q https://github.com/hugsy/gef/raw/master/gef.py
    $ echo source ~/.gdbinit-gef.py >> ~/.gdbinit
    #+END_SRC

- [[https://github.com/sashs/Ropper][Ropper]]
**  Challenges 

1. [[file:bomblab/bomb][bomblab]] 
   - Introduction to ARM Assembly Language 
When run, it prompts the user to type in 6 different strings. If any of these is incorrect, the bomb "explodes," printing an error message and logging the event on a grading server. Students must "defuse" their own unique bomb by disassembling and reverse engineering the program to determine what the 6 strings should be.

2. [[file:bof/bof][bof]]
   - Getting familiarized with the environment 
Exploit the Buffer Overflow bug call the win function .

3. [[file:shellcode/shell][shellcode]]
   - Writing Shellcode for ARM architecture
4. [[file:fmt/fmt][fmt]]
   - Writing exploit script with pwntools 
Exploit the format string vulnerability to leak the canary and a Buffer overflow to gain shell .
** Reference 

[1]. [[http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.subset.architecture.reference/index.html][infocenter]] : Best Source 

[2]. [[http://azeria-labs.com/][Azeria-Labs]]

[3]. [[http://www.opensecuritytraining.info/IntroARM.html][OpenSecurityTraining Intro to ARM]]

[4]. [[http://www.davespace.co.uk/arm/introduction-to-arm/][http://www.davespace.co.uk/arm/introduction-to-arm/]]

[5]. [[https://reverseengineering.stackexchange.com/questions/8829/cross-debugging-for-arm-mips-elf-with-qemu-toolchain][cross debugging for arm mips elf with QEMU toolchain]]

[6]. [[http://www.shell-storm.org/blog/Shellcode-On-ARM-Architecture/][Shellcode On ARM Architecture]]

[7]. [[http://phrack.org/issues/66/12.html][Phrack Issue 66 Article 12]]


Happy Hacking
